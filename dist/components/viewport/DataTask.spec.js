"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var DataTask_1 = __importDefault(require("./DataTask"));
var DateHelper_1 = __importDefault(require("../../helpers/DateHelper"));
var Const_1 = require("../../Const");
var Const_2 = require("../../Const");
var enzyme_1 = require("enzyme");
describe('Testing Firing Events ', function () {
    it('Initialise Properly and not null pointer', function () {
        var wrapper = enzyme_1.shallow(react_1.default.createElement(DataTask_1.default, { item: {} }));
        expect(wrapper.find('.timeLine-main-data-task')).toBeDefined();
    });
    it('Initialise Properly and not null pointer', function () {
        var wrapper = enzyme_1.shallow(react_1.default.createElement(DataTask_1.default, { left: 0, item: {}, width: 80, color: "red" }));
        var style = wrapper.instance().calculateStyle();
        expect(style.left).toBe(0);
        expect(style.width).toBe(80);
        expect(style.backgroundColor).toBe('red');
        // expect(wrapper.instance().containerStyle.height).toBe(10);
    });
    it('Move and handle mouse event properly', function () {
        var onChildDrag = jest.fn();
        var onUpdateTask = jest.fn();
        var onTaskChanging = jest.fn();
        var item = { name: 'this Item' };
        var dayWidth = 30;
        var nowposition = 0;
        var stopPropagation = jest.fn();
        var wrapper = enzyme_1.shallow(react_1.default.createElement(DataTask_1.default, { nowposition: nowposition, dayWidth: dayWidth, onChildDrag: onChildDrag, onUpdateTask: onUpdateTask, onTaskChanging: onTaskChanging, item: item, left: 0, width: 80, color: "red" }));
        expect(wrapper.state().dragging).toBe(false);
        wrapper.instance().doMouseDown({ button: 1, clientX: 10, stopPropagation: stopPropagation }, Const_1.MODE_MOVE);
        expect(wrapper.state().mode).toBe(Const_1.MODE_NONE);
        expect(wrapper.state().dragging).toBe(false);
        wrapper.instance().doMouseDown({ button: 0, clientX: 10, stopPropagation: stopPropagation }, Const_1.MODE_MOVE);
        expect(wrapper.state().mode).toBe(Const_1.MODE_MOVE);
        expect(wrapper.state().dragging).toBe(true);
        expect(wrapper.state().left).toBe(0);
        expect(wrapper.instance().draggingPosition).toBe(10);
        expect(onChildDrag.mock.calls.length).toBe(1);
        expect(onChildDrag.mock.calls[0][0]).toBe(true);
        wrapper.instance().doMouseMove({ button: 0, clientX: 20, stopPropagation: stopPropagation });
        expect(wrapper.state().left).toBe(10);
        expect(wrapper.instance().draggingPosition).toBe(20);
        var style = wrapper.instance().calculateStyle();
        expect(style.left).toBe(10);
        expect(style.width).toBe(80);
        expect(style.backgroundColor).toBe('red');
        wrapper.instance().doMouseUp();
        expect(wrapper.state().mode).toBe(Const_1.MODE_NONE);
        expect(onChildDrag.mock.calls.length).toBe(2);
        expect(onChildDrag.mock.calls[1][0]).toBe(false);
        expect(onUpdateTask.mock.calls.length).toBe(1);
        expect(onUpdateTask.mock.calls[0][0]).toBe(item);
        var new_start_date = DateHelper_1.default.pixelToDate(10, nowposition, dayWidth);
        var new_end_date = DateHelper_1.default.pixelToDate(90, nowposition, dayWidth);
        expect(new_start_date.getTime() - onUpdateTask.mock.calls[0][1].start.getTime() < 10).toBe(true);
        expect(new_end_date.getTime() - onUpdateTask.mock.calls[0][1].end.getTime() < 10).toBe(true);
    });
    it('Resize Left and handle mouse event properly', function () {
        var onChildDrag = jest.fn();
        var onUpdateTask = jest.fn();
        var onTaskChanging = jest.fn();
        var stopPropagation = jest.fn();
        var item = { name: 'this Item' };
        var dayWidth = 30;
        var nowposition = 0;
        var wrapper = enzyme_1.shallow(react_1.default.createElement(DataTask_1.default, { nowposition: nowposition, dayWidth: dayWidth, onChildDrag: onChildDrag, onUpdateTask: onUpdateTask, onTaskChanging: onTaskChanging, item: item, left: 0, width: 80, color: "red" }));
        expect(wrapper.state().dragging).toBe(false);
        wrapper.instance().doMouseDown({ button: 1, clientX: 10, stopPropagation: stopPropagation }, Const_1.MOVE_RESIZE_LEFT);
        expect(wrapper.state().dragging).toBe(false);
        expect(wrapper.state().mode).toBe(Const_1.MODE_NONE);
        wrapper.instance().doMouseDown({ button: 0, clientX: 10, stopPropagation: stopPropagation }, Const_1.MOVE_RESIZE_LEFT);
        expect(wrapper.state().mode).toBe(Const_1.MOVE_RESIZE_LEFT);
        expect(wrapper.state().dragging).toBe(true);
        expect(wrapper.state().left).toBe(0);
        expect(wrapper.instance().draggingPosition).toBe(10);
        expect(onChildDrag.mock.calls.length).toBe(1);
        expect(onChildDrag.mock.calls[0][0]).toBe(true);
        wrapper.instance().doMouseMove({ button: 0, clientX: 20, stopPropagation: stopPropagation });
        expect(wrapper.state().left).toBe(10);
        expect(wrapper.instance().draggingPosition).toBe(20);
        var style = wrapper.instance().calculateStyle();
        expect(style.left).toBe(10);
        expect(style.width).toBe(70);
        expect(style.backgroundColor).toBe('red');
        wrapper.instance().doMouseUp();
        expect(wrapper.state().mode).toBe(Const_1.MODE_NONE);
        expect(onChildDrag.mock.calls.length).toBe(2);
        expect(onChildDrag.mock.calls[1][0]).toBe(false);
        expect(onUpdateTask.mock.calls.length).toBe(1);
        expect(onUpdateTask.mock.calls[0][0]).toBe(item);
        var new_start_date = DateHelper_1.default.pixelToDate(10, nowposition, dayWidth);
        var new_end_date = DateHelper_1.default.pixelToDate(70, nowposition, dayWidth);
        expect(new_start_date.getTime() - onUpdateTask.mock.calls[0][1].start.getTime() < 10).toBe(true);
        expect(new_end_date.getTime() - onUpdateTask.mock.calls[0][1].end.getTime() < 10).toBe(true);
    });
    it('Resize Right and handle mouse event properly', function () {
        var onChildDrag = jest.fn();
        var onUpdateTask = jest.fn();
        var onTaskChanging = jest.fn();
        var item = { name: 'this Item' };
        var dayWidth = 30;
        var nowposition = 0;
        var stopPropagation = jest.fn();
        var wrapper = enzyme_1.shallow(react_1.default.createElement(DataTask_1.default, { nowposition: nowposition, dayWidth: dayWidth, onChildDrag: onChildDrag, onUpdateTask: onUpdateTask, onTaskChanging: onTaskChanging, item: item, left: 0, width: 80, color: "red" }));
        expect(wrapper.state().dragging).toBe(false);
        wrapper.instance().doMouseDown({ button: 1, clientX: 10, stopPropagation: stopPropagation }, Const_1.MOVE_RESIZE_RIGHT);
        expect(wrapper.state().dragging).toBe(false);
        expect(wrapper.state().mode).toBe(Const_1.MODE_NONE);
        wrapper.instance().doMouseDown({ button: 0, clientX: 10, stopPropagation: stopPropagation }, Const_1.MOVE_RESIZE_RIGHT);
        expect(wrapper.state().mode).toBe(Const_1.MOVE_RESIZE_RIGHT);
        expect(wrapper.state().dragging).toBe(true);
        expect(wrapper.state().left).toBe(0);
        expect(wrapper.instance().draggingPosition).toBe(10);
        expect(onChildDrag.mock.calls.length).toBe(1);
        expect(onChildDrag.mock.calls[0][0]).toBe(true);
        wrapper.instance().doMouseMove({ button: 0, clientX: 20, stopPropagation: stopPropagation });
        expect(wrapper.state().left).toBe(0);
        expect(wrapper.instance().draggingPosition).toBe(20);
        var style = wrapper.instance().calculateStyle();
        expect(style.left).toBe(0);
        expect(style.width).toBe(90);
        expect(style.backgroundColor).toBe('red');
        wrapper.instance().doMouseUp();
        expect(wrapper.state().mode).toBe(Const_1.MODE_NONE);
        expect(onChildDrag.mock.calls.length).toBe(2);
        expect(onChildDrag.mock.calls[1][0]).toBe(false);
        expect(onUpdateTask.mock.calls.length).toBe(1);
        expect(onUpdateTask.mock.calls[0][0]).toBe(item);
        var new_start_date = DateHelper_1.default.pixelToDate(0, nowposition, dayWidth);
        var new_end_date = DateHelper_1.default.pixelToDate(90, nowposition, dayWidth);
        expect(new_start_date.getTime() - onUpdateTask.mock.calls[0][1].start.getTime() < 10).toBe(true);
        expect(new_end_date.getTime() - onUpdateTask.mock.calls[0][1].end.getTime() < 10).toBe(true);
    });
    it('Starting Creation of Task', function () {
        var onStartCreateLink = jest.fn();
        var stopPropagation = jest.fn();
        var item = { name: 'this Item' };
        var dayWidth = 30;
        var nowposition = 0;
        var wrapper = enzyme_1.shallow(react_1.default.createElement(DataTask_1.default, { nowposition: nowposition, dayWidth: dayWidth, onStartCreateLink: onStartCreateLink, item: item, left: 0, width: 80, color: "red" }));
        expect(wrapper.state().dragging).toBe(false);
        var taskSide = wrapper.find('.timeLine-main-data-task-side-linker');
        expect(taskSide.length).toBe(2);
        taskSide.first().simulate('mousedown', { button: 0, stopPropagation: stopPropagation });
        expect(onStartCreateLink.mock.calls.length).toBe(0);
        taskSide.last().simulate('mousedown', { button: 0, stopPropagation: stopPropagation });
        expect(onStartCreateLink.mock.calls.length).toBe(1);
        expect(onStartCreateLink.mock.calls[0][0]).toBe(item);
        expect(onStartCreateLink.mock.calls[0][1]).toBe(Const_2.LINK_POS_RIGHT);
        expect(stopPropagation.mock.calls.length).toBe(1);
    });
    it('Finishing Creation of Task', function () {
        var onFinishCreateLink = jest.fn();
        var stopPropagation = jest.fn();
        var item = { name: 'this Item' };
        var dayWidth = 30;
        var nowposition = 0;
        var wrapper = enzyme_1.shallow(react_1.default.createElement(DataTask_1.default, { nowposition: nowposition, dayWidth: dayWidth, onFinishCreateLink: onFinishCreateLink, item: item, left: 0, width: 80, color: "red" }));
        expect(wrapper.state().dragging).toBe(false);
        var taskSide = wrapper.find('.timeLine-main-data-task-side-linker');
        expect(taskSide.length).toBe(2);
        taskSide.first().simulate('mouseup', { button: 0, stopPropagation: stopPropagation });
        expect(onFinishCreateLink.mock.calls.length).toBe(1);
        expect(onFinishCreateLink.mock.calls[0][0]).toBe(item);
        expect(onFinishCreateLink.mock.calls[0][1]).toBe(Const_2.LINK_POS_LEFT);
        expect(stopPropagation.mock.calls.length).toBe(1);
        //This side dont accept mouse up
        taskSide.last().simulate('mouseup', { button: 0, stopPropagation: stopPropagation });
        expect(onFinishCreateLink.mock.calls.length).toBe(1);
    });
});
